const path = require("path");

const { convertArrayToObject } = require("../utils/scalars/array");
const { hasProperty } = require("../utils/scalars/object");
const { toSlug, startCase } = require("../utils/scalars/string");
const { pathUrl } = require("../utils/scalars/url");
const { prettifyJavascript } = require("../utils/helpers/prettier");
const {
  saveFile,
  emptyDir,
  ensureDir,
  copyFile,
  readFile,
  fileExists,
} = require("../utils/helpers/fs");
const { basename } = require("path");

const SIDEBAR = "sidebar-schema.js";
const HOMEPAGE_ID = "schema";

module.exports = class Renderer {
  constructor(printer, outputDir, baseURL, group) {
    this.group = group;
    this.outputDir = outputDir;
    this.baseURL = baseURL;
    this.printer = printer;
    this.navigation = {};
  }

  async emptyOutputDir() {
    await emptyDir(this.outputDir);
  }

  async generateCategoryMetafile(category, dirPath) {
    const filePath = path.join(dirPath, "_category_.yml");
    if (!(await fileExists(filePath))) {
      await ensureDir(dirPath);
      await saveFile(filePath, `label: '${startCase(category)}'\n`);
    }
  }

  addToNavigation(path) {
    path.split("/").reduce(function (r, e) {
      return r[e] || (r[e] = {});
    }, this.navigation);
  }

  async renderRootTypes(rootTypeName, type) {
    if (typeof type === "undefined" || type === null) {
      return undefined;
    }

    if (Array.isArray(type)) {
      type = convertArrayToObject(type);
    }

    return Promise.all(
      Object.keys(type).map(async (name) => {
        let dirPath = this.outputDir;

        if (hasProperty(this.group, name)) {
          dirPath = path.join(dirPath, toSlug(this.group[name]));
          // await this.generateCategoryMetafile(this.group[name], dirPath);
        }
        dirPath = path.join(dirPath, toSlug(rootTypeName));
        // await this.generateCategoryMetafile(rootTypeName, dirPath);
        this.addToNavigation(
          path.join(dirPath.replace("generated/", ""), name),
        );

        return this.renderTypeEntities(dirPath, name, type[name]);
      }),
    );
  }

  async renderTypeEntities(dirPath, name, type) {
    if (typeof type === "undefined" || type === null) {
      return undefined;
    }

    const fileName = toSlug(name);
    const filePath = path.join(path.normalize(dirPath), `${fileName}.liquid`);

    const content = this.printer.printType(fileName, type);
    await saveFile(filePath, content);

    const pagePath = path.relative(this.outputDir, filePath);
    const page = pagePath.match(
      /(?<category>[A-z0-9-_]+)[\\/]+(?<pageId>[A-z0-9-_]+).liquid?$/,
    );
    const slug = pathUrl.join(page.groups.category, page.groups.pageId);

    return { category: startCase(page.groups.category), slug: slug };
  }

  async renderNavigationData(navigationLocation) {
    await saveFile(navigationLocation, JSON.stringify(this.navigation));
  }

  async renderSidebar() {
    const { schemaSidebar } = require("../../assets/sidebar.json");
    const sidebar = {
      schemaSidebar: schemaSidebar.map((entry) => {
        switch (entry.type) {
          case "doc":
            entry.id = pathUrl.join(this.baseURL, HOMEPAGE_ID);
            break;
          case "autogenerated":
            entry.dirName = this.baseURL;
            break;
          default: //do nothing
        }
        return entry;
      }),
    };

    const jsonSidebar = JSON.stringify(sidebar, null, 2);
    const content = prettifyJavascript(`module.exports = ${jsonSidebar};`);

    const filePath = path.join(this.outputDir, SIDEBAR);
    await saveFile(filePath, content);

    return path.relative("./", filePath);
  }

  async renderHomepage(homepageLocation) {
    const homePage = path.basename(homepageLocation);
    const destLocation = path.join(this.outputDir, homePage);
    const slug = pathUrl.resolve("/", this.baseURL);

    await copyFile(homepageLocation, destLocation);

    const template = await readFile(destLocation);

    const data = template
      .toString()
      .replace(/##baseURL##/gm, slug)
      .replace(/##generated-date-time##/gm, new Date().toLocaleString());
    await saveFile(destLocation, data);
  }
};
